#+html: <p align="center"><img src="logo/maxima_emacs.png" /></p>
* Maxima.el
[[https://melpa.org/#/maxima][file:https://melpa.org/packages/maxima-badge.svg]]
[[https://stable.melpa.org/#/maxima][file:https://stable.melpa.org/packages/maxima-badge.svg]]
[[License: GPL v3][https://img.shields.io/badge/License-GPLv3-blue.svg]]
:PROPERTIES:
:TOC:       :include descendants
:END:

:CONTENTS:
- [[#install][Install]]
  - [[#source][Source]]
  - [[#quelpa][Quelpa]]
  - [[#melpa][Melpa]]
  - [[#use-pacakge--straightel][use-pacakge + straight.el]]
- [[#usage][Usage]]
- [[#maxima-mode][Maxima mode]]
  - [[#motion-commands][Motion commands]]
  - [[#completions-command][Completions command]]
  - [[#company-integration][Company integration]]
  - [[#org-mode-and-latex-integration][Org-mode and Latex integration]]
  - [[#interaction-with-the-maxima-process][Interaction with the Maxima process]]
  - [[#running-maxima-interactively][Running Maxima interactively]]
    - [[#scroll-through-previous-commands][Scroll through previous commands,]]
  - [[#running-maxima-from-the-minibuffer][Running Maxima from the minibuffer]]
  - [[#reading-maxima-results-in-the-minibuffer][Reading Maxima results in the minibuffer]]
  - [[#maxima-minor-mode][Maxima minor mode]]
    - [[#enabled-commands][Enabled commands]]
- [[#license][License]]
:END:

** Install 
*** Source
To install, put this repository
somewhere in your Emacs load path.

To make sure that  *maxima.el*  is loaded when necessary, whether to
edit a file in maxima mode or interact with Maxima in an Emacs buffer,
put the lines:

 #+BEGIN_SRC emacs-lisp 
   (add-to-list 'load-path "/path/to/maxima/")
  #+END_SRC

In your .emacs or init.el file.  If you want any file ending in .mac to begin
in *maxima-mode*, for example, put the line:

 #+BEGIN_SRC emacs-lisp 
  (setq auto-mode-alist (cons '("\\.mac" . maxima-mode) auto-mode-alist))
  #+END_SRC


*** Quelpa
     You can install it with [[https://github.com/quelpa/quelpa][quelpa]]:

     #+begin_src emacs-lisp 
     (quelpa '(maxima :type git :host gitlab :repo "sasanidas/maxima"))
     #+end_src

     
*** Melpa
    The maxima package can be found [[https://melpa.org/#/maxima][here]], to install it with package.el :

     =M-x package-install RET maxima RET= to install =maxima= from [[https://melpa.org/][MELPA]].


*** use-pacakge + straight.el
    This is a configuration example with =use-pacakge= and =straight.el=, it is also
    my personal configuration:

#+begin_src emacs-lisp
     (use-package maxima
       :straight (maxima :type git :host gitlab :repo "sasanidas/maxima")
       :defer t
       :init 
       (require 'maxima-font-lock)
       (require 'company-maxima)
       (add-to-list 'company-backends '(company-maxima-symbols company-maxima-libraries))
       (setq
	org-format-latex-options (plist-put org-format-latex-options :scale 2.0)
	maxima-display-maxima-buffer nil)
       :mode ("\\.mac\\'" . maxima-mode)
       :interpreter ("maxima" . maxima-mode))
#+end_src



** Usage

 In *any* of the Maxima modes, to get help on a prompted for Maxima topic,
use *C-c* *C-d* *h* or *f12*.

  + Help with the symbol under point, use ("d" for describe): 
    
    | Key combination | Function name            |
    |-----------------+--------------------------|
    | C-c C-d d       | maxima-completion-help |
    | C-c C-d C-d     | maxima-completion-help |
 
 
 + Apropos
   
    | Key combination | Function name  |
    |-----------------+----------------|
    | C-c C-d a       | maxima-apropos |
    | C-C C-d C-a     | maxima-apropos |
    | M-f12           | maxima-apropos |

   To get apropos with the symbol under point, use:

    | Key combination | Function name       |
    |-----------------+---------------------|
    | C-c C-d p       | maxima-apropos-help |
    | C-C C-d C-p     | maxima-apropos-help |
 
 + Maxima info manual, use:

    | Key combination | Function name |
    |-----------------+---------------|
    | C-c C-d m       | maxima-info   |
    | C-C C-d C-m     | maxima-info   |
    | C-C C-d i       | maxima-info   |
    | C-C C-d i       | maxima-info   |
    | C-C C-d C-i     | maxima-info   |

 
 (For Maxima minor mode, replace C-cC-d by C-c=d.)


** Maxima mode
To put the current buffer into maxima-mode, type:
=M-x maxima-mode=
 

*** Motion commands
    | Key combination | Function name                             | Explanation                                        |
    |-----------------+-------------------------------------------+----------------------------------------------------|
    | M-C-a           | maxima-goto-beginning-of-form-interactive | Move to the beginning of the form.                 |
    | M-C-e           | maxima-goto-end-of-form-interactive       | Move to the end of the form.                       |
    | M-C-b           | maxima-goto-beginning-of-list-interactive | Move to the beginning of the list.                 |
    | M-C-f           | maxima-goto-end-of-list-interactive       | Move to the end of the list.                       |
    | M-h             | maxima-mark-form                          | Mark the current form                              |
    | C-c )           | maxima-check-parens-region                | Check the current region for balanced parentheses. |
    | C-c C-)         | maxima-check-form-parens                  | Check the current form for balanced parentheses.   |

    
*** Completions command

    | Key combination | Function name   | Explanation                                                                                                                  |
    |-----------------+-----------------+------------------------------------------------------------------------------------------------------------------------------|
    | M-TAB           | maxima-complete | Complete the Maxima symbol as much as possible, providing a completion buffer if there is more than one possible completion. |

Portions of the buffer can be sent to a Maxima process.  (If a process is  not running, one will be started.)


*** Company integration
    Maxima.el have a company backend for people who use [[https://melpa.org/#/company][company-mode]], to enable it, make sure that [[file:company-maxima.el][company-maxima.el]] is loaded
    add this to your .emacs/init.el file:

    #+begin_src emacs-lisp :tangle yes
    (require 'company-maxima)
    (add-to-list 'company-backends '(company-maxima-symbols company-maxima-libraries))
    #+end_src
    
    This will create the backend and add it to the =company-backends= list.


*** Org-mode and Latex integration
    By default, [[https://orgmode.org/][org-mode]] supports maxima syntax highlight, export results and plot integration.
    To enable it, you have add it to =org-babel-load-languages= :

    #+begin_src emacs-lisp :tangle yes
(org-babel-do-load-languages
 'org-babel-load-languages
 '((maxima . t))) 
    #+end_src
    More information in [[https://www.orgmode.org/worg/org-contrib/babel/languages/ob-doc-maxima.html][here]].
    
    With tex integration, we use org-mode latex functionalities, to use it you must have:

    + [[HTTPS://www.latex-project.org/get/][LATEX]] 
    + One of the =org-preview-latex= software in order to convert latex to image
      + dvipng
      + dvisvgm
      + imagemagic

    The variable =org-preview-latex-process-alist= show more extend information about it, the default
    one is defined in =org-preview-latex-default-process=.

    It is recommended to increase the latex format font, the default one is quite small:
    #+begin_src emacs-lisp :tangle yes
(setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
    #+end_src
    
    Available functions:

| Function name            | Explanation                                         |
|--------------------------+-----------------------------------------------------|
| maxima-latex-insert-form | Insert the preview latex image below the current form |




*** Interaction with the Maxima process
 When something is sent to Maxima, a buffer running an inferior Maxima 
 process will appear.  

 It can also be made to appear by using the command =C-c C-p=.

 When a command is given to send information to Maxima, the region
 (buffer, line, form) is first checked to make sure the parentheses
 are balanced.  
 
 With an argument, they *will not* be checked first.
 
 The Maxima process can be killed, after asking for confirmation 
 with =C-c C-k=.  
 
 To kill without confirmation, give =maxima-stop= an argument.


    | Key combination | Function name                                   | Explanation                                                                                                         |
    |-----------------+-------------------------------------------------+---------------------------------------------------------------------------------------------------------------------|
    | C-c C-r         | maxima-send-region                              | Send the region to Maxima.                                                                                          |
    | C-c C-b         | maxima-send-buffer                              | Send the buffer to Maxima.                                                                                          |
    | C-c C-c         | maxima-send-line                                | Send the line to Maxima.                                                                                            |
    | C-c C-e         | maxima-send-previous-form                       | Send the form to Maxima.                                                                                            |
    | C-RET           | maxima-send-full-line-and-goto-next-form        | Send the smallest set of lines which contains the cursor and contains no incomplete forms, and go to the next form. |
    | M-RET           | maxima-send-completed-region-and-goto-next-form | As above, but with the region instead of the current line.                                                          |
    | C-c C-l         | maxima-load-file                                | Prompt for a file name to load into Maxima.                                                                         |


 By default, indentation will be to the same level as the 
 previous line, with an additional space added for open parentheses.
 
 The behaviour of indent can be changed by the command =M-x maxima-change-indent-style=.
 
 The possibilities are:

 | Standard      | Simply indent                                                                         |
 | Perhaps smart | Tries to guess an appropriate indentation, based on pen parentheses, "do" loops, etc. |
 
 
 The default can be set by setting the value of the variable 
 =maxima-indent-style= to either 'standard or 'perhaps-smart.
 

 In both cases, =M-x maxima-untab= will remove a level of indentation.


*** Running Maxima interactively 
 
 To run Maxima interactively in a buffer, type =M-x maxima=
 In the Maxima process buffer,return will check the line for balanced parentheses, and send line as input.
 
**** Scroll through previous commands,

     | Key combination | Explanation                                                           |
     |-----------------+-----------------------------------------------------------------------|
     | M-p             | Bring the previous input to the current prompt,                       |
     | M-n             | Bring the next input to the prompt.                                   |
     | M-r             | Bring the previous input matching a regular expression to the prompt, |
     | M-s             | Bring the next input matching a regular expression to the prompt.     |


*** Running Maxima from the minibuffer

 The command =M-x maxima-minibuffer=
 will allow you to interact with Maxima from the minibuffer.  
 The arrows will allow you to scroll through previous inputs.
 
 If the variable maxima-minibuffer-2d is non-nil, then the output
 will be in Maxima's 2d output form, otherwise it will be in 
 Maxima's 1d output form. 
 
 The command =maxima-insert-last-output= will insert
 the last maxima output into the current buffer; if the output is in 2d, 
 this will look unpleasant.  The command  maxima-insert-last-output-tex
 will insert the TeX form of the output.
 

*** Reading Maxima results in the minibuffer 

 The command =maxima-minibuffer-on-determined-region= 
   will send the part of the current buffer containing the point and between 
   the regexps =maxima-minor-prefix= and =maxima-minor-postfix= (currently
   both blank lines) to the Maxima process and insert the result in the
   minibuffer.  
   
   With an argument, =maxima-minibuffer-in-determined-region=
   will also insert the output into the current buffer, after " ==> "
   and before "//".  (The symbol ` ==> ' is the value of the customizable 
   variable `maxima-minor-output' and "//" is the value of 
   =maxima-minor-output-end=.  The new output is inserted, these strings 
   will be used to delete the old output.
   
   
   Outside of comments in maxima-mode, the opening and closing indicators 
   are the values of =maxima-mode-minor-output= and 
   =maxima-mode-minor-output-end=, which by default are " /*==>" and 
   " <==*/", respectively.

 The commands =maxima-minibuffer-on-region=, =maxima-minibuffer-on-line=
 and =maxima-minibuffer-on-form= work similarly to 
 =maxima-minibuffer-on-determined-region=, but send the current region
 (respectively, the current line, current form) to Maxima and display
 the result in the minibuffer.
 (The form is the region between the preceding ; or $ and the subsequent
 ; or $)
 
 Care must be taken when inserting the output into the current buffer
 with =maxima-minibuffer-on-region= and =maxima-minibuffer-on-form=.
 With =maxima-minibuffer-on-region=, as with 
 =maxima-minibuffer-on-determined-region= above, everything after any
 "==>" in the region will be ignored.  
 
 
 What will typically happen with =maxima-minibuffer-on-region= and
 =maxima-minibuffer-on-form=, however, is that new outputs will
 be inserted without old output being deleted.

 
*** Maxima minor mode
 maxima-minor-mode provides convenient keybindings for the various
 interactions between Maxima and the minibuffer.
 
 It can be made easily available with =M-x maxima-minor-mode=, that will start the minor mode.
 
 There is also the posibility to enable =maxima-minor-mode= globally with:
#+begin_src emacs-lisp
  (require 'maxima)
  (global-maxima-minor-mode)

#+end_src

**** Enabled commands
     | Key combination | Function                               |
     |-----------------+----------------------------------------|
     | C-c=e           | maxima-minibuffer-on-determined-region |
     | C-c=l           | maxima-minibuffer-on-line              |
     | C-c=r           | maxima-minibuffer-on-region            |
     | C-c=f           | maxima-minibuffer-on-form              |
     | C-c=m           | maxima-minibuffer                      |
     | C-c=o           | maxima-insert-last-output              |
     | C-c=t           | maxima-insert-last-output-tex          |


** License
#+begin_example
  General Public License Version 3 (GPLv3)
  Copyright (c) Fermin MF - https://sasanidas.gitlab.io/f-site/
  https://gitlab.com/sasanidas/maxima/-/blob/master/LICENSE
#+end_example
