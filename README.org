* Maxima.el 
[[License: GPL v3][https://img.shields.io/badge/License-GPLv3-blue.svg]]
  - [[#install][Install]]
    - [[#source][Source]]
  - [[#usage][Usage]]
  - [[#maxima-mode][Maxima mode]]
    - [[#motion-commands][Motion commands]]
    - [[#completions-command][Completions command]]
    - [[#company-integration][Company integration]]
    - [[#interaction-with-the-maxima-process][Interaction with the Maxima process]]
    - [[#maxima-noweb-mode][Maxima noweb mode]]
    - [[#running-maxima-interactively][Running Maxima interactively]]
      - [[#scroll-through-previous-commands][Scroll through previous commands,]]
    - [[#running-maxima-from-the-minibuffer][Running Maxima from the minibuffer]]
    - [[#reading-maxima-results-in-the-minibuffer][Reading Maxima results in the minibuffer]]
    - [[#maxima-minor-mode][Maxima minor mode]]
      - [[#enabled-commands][Enabled commands]]

** Install 
*** Source
To install, put this file (as well as maxima-font-lock.el)
somewhere in your Emacs load path.

To make sure that  *maxima.el*  is loaded when necessary, whether to
edit a file in maxima mode or interact with Maxima in an Emacs buffer,
put the lines:
 #+BEGIN_SRC emacs-lisp 
  (autoload 'maxima-mode "maxima" "Maxima mode" t)
  (autoload 'maxima "maxima" "Maxima interaction" t)
  #+END_SRC
In your `.emacs' file.  If you want any file ending in `.max' to begin
in *maxima-mode*, for example, put the line:
 #+BEGIN_SRC emacs-lisp 
  (setq auto-mode-alist (cons '("\\.max" . maxima-mode) auto-mode-alist))
  #+END_SRC
to your `.emacs' file.


** Usage

 In *any* of the Maxima modes, to get help on a prompted for Maxima topic,
use *C-c* *C-d* *h* or *f12*.

  + Help with the symbol under point, use ("d" for describe): 
    
    | Key combination | Function name            |
    |-----------------+--------------------------|
    | C-c C-d d       | maxima-completion-help |
    | C-c C-d C-d     | maxima-completion-help |
 
 
 + Apropos
   
    | Key combination | Function name  |
    |-----------------+----------------|
    | C-c C-d a       | maxima-apropos |
    | C-C C-d C-a     | maxima-apropos |
    | M-f12           | maxima-apropos |

   To get apropos with the symbol under point, use:

    | Key combination | Function name       |
    |-----------------+---------------------|
    | C-c C-d p       | maxima-apropos-help |
    | C-C C-d C-p     | maxima-apropos-help |
 
 + Maxima info manual, use:

    | Key combination | Function name |
    |-----------------+---------------|
    | C-c C-d m       | maxima-info   |
    | C-C C-d C-m     | maxima-info   |
    | C-C C-d i       | maxima-info   |
    | C-C C-d i       | maxima-info   |
    | C-C C-d C-i     | maxima-info   |

 
 (For Maxima minor mode, replace C-cC-d by C-c=d.)


** Maxima mode
To put the current buffer into maxima-mode, type:
=M-x maxima-mode=
 

*** Motion commands
    | Key combination | Function name                             | Explanation                                        |
    |-----------------+-------------------------------------------+----------------------------------------------------|
    | M-C-a           | maxima-goto-beginning-of-form-interactive | Move to the beginning of the form.                 |
    | M-C-e           | maxima-goto-end-of-form-interactive       | Move to the end of the form.                       |
    | M-C-b           | maxima-goto-beginning-of-list-interactive | Move to the beginning of the list.                 |
    | M-C-f           | maxima-goto-end-of-list-interactive       | Move to the end of the list.                       |
    | M-h             | maxima-mark-form                          | Mark the current form                              |
    | C-c )           | maxima-check-parens                       | Check the current region for balanced parentheses. |
    | C-c C-)         | maxima-check-form-parens                  | Check the current form for balanced parentheses.   |

    
*** Completions command

    | Key combination | Function name   | Explanation                                                                                                                  |
    |-----------------+-----------------+------------------------------------------------------------------------------------------------------------------------------|
    | M-TAB           | maxima-complete | Complete the Maxima symbol as much as possible, providing a completion buffer if there is more than one possible completion. |

Portions of the buffer can be sent to a Maxima process.  (If a process is  not running, one will be started.)


*** Company integration
    Maxima.el have a company backend for people who use [[https://melpa.org/#/company][company-mode]], to enable it add this to your .emacs/init.el file:
    #+begin_src emacs-lisp :tangle yes
    (setq maxima-use-company t)
    #+end_src
    
    This will create the backend and add it to the =company-backends= list.



*** Interaction with the Maxima process
 When something is sent to Maxima, a buffer running an inferior Maxima 
 process will appear.  

 It can also be made to appear by using the command =C-c C-p=.

 When a command is given to send information to Maxima, the region
 (buffer, line, form) is first checked to make sure the parentheses
 are balanced.  
 
 With an argument, they *will not* be checked first.
 
 The Maxima process can be killed, after asking for confirmation 
 with =C-c C-k=.  
 
 To kill without confirmation, give =maxima-stop= an argument.


    | Key combination | Function name                                   | Explanation                                                                                                         |
    |-----------------+-------------------------------------------------+---------------------------------------------------------------------------------------------------------------------|
    | C-c C-r         | maxima-send-region                              | Send the region to Maxima.                                                                                          |
    | C-c C-b         | maxima-send-buffer                              | Send the buffer to Maxima.                                                                                          |
    | C-c C-c         | maxima-send-line                                | Send the line to Maxima.                                                                                            |
    | C-c C-e         | maxima-send-previous-form                       | Send the form to Maxima.                                                                                            |
    | C-RET           | maxima-send-full-line-and-goto-next-form        | Send the smallest set of lines which contains the cursor and contains no incomplete forms, and go to the next form. |
    | M-RET           | maxima-send-completed-region-and-goto-next-form | As above, but with the region instead of the current line.                                                          |
    | C-c C-l         | maxima-load-file                                | Prompt for a file name to load into Maxima.                                                                         |


 By default, indentation will be to the same level as the 
 previous line, with an additional space added for open parentheses.
 
 The behaviour of indent can be changed by the command =M-x maxima-change-indent-style=.
 
 The possibilities are:

 | Standard      | Simply indent                                                                         |
 | Perhaps smart | Tries to guess an appropriate indentation, based on pen parentheses, "do" loops, etc. |
 
 
 The default can be set by setting the value of the variable 
 =maxima-indent-style= to either 'standard or 'perhaps-smart.
 

 In both cases, =M-x maxima-untab= will remove a level of indentation.


*** Maxima noweb mode 
 maxima-noweb-mode is a modification of maxima-mode that will work with [[https://github.com/nrnrnr/noweb/blob/master/src/elisp/noweb-mode.el][noweb-mode]] nicely.
 It will limit any relevant searches  to the current chunk and treat <<...>> as word parts.
 To enable it, you have to require it, like this:

 #+begin_src emacs-lisp :tangle yes

 (require 'maxima-noweb)

 #+end_src
 

*** Running Maxima interactively 
 
 To run Maxima interactively in a buffer, type =M-x maxima=
 In the Maxima process buffer,return will check the line for balanced parentheses, and send line as input.
 
**** Scroll through previous commands,

     | Key combination | Explanation                                                           |
     |-----------------+-----------------------------------------------------------------------|
     | M-p             | Bring the previous input to the current prompt,                       |
     | M-n             | Bring the next input to the prompt.                                   |
     | M-r             | Bring the previous input matching a regular expression to the prompt, |
     | M-s             | Bring the next input matching a regular expression to the prompt.     |


*** Running Maxima from the minibuffer

 The command =M-x maxima-minibuffer=
 will allow you to interact with Maxima from the minibuffer.  
 The arrows will allow you to scroll through previous inputs.
 
 The line (autoload 'maxima-minibuffer "maxima" "Maxima in a minibuffer" t)
 in your .emacs will make sure the function is available.
 
 If the variable maxima-minibuffer-2d is non-nil, then the output
 will be in Maxima's 2d output form, otherwise it will be in 
 Maxima's 1d output form. 
 
 The command maxima-insert-last-output will insert
 the last maxima output into the current buffer; if the output is in 2d, 
 this will look unpleasant.  The command  maxima-insert-last-output-tex
 will insert the TeX form of the output.
 

*** Reading Maxima results in the minibuffer 
 The command `maxima-minibuffer-on-determined-region' 
   will send the part of the current buffer containing the point and between 
   the regexps `maxima-minor-prefix' and `maxima-minor-postfix' (currently
   both blank lines) to the Maxima process and insert the result in the
   minibuffer.  
   
   With an argument, `maxima-minibuffer-in-determined-region'
   will also insert the output into the current buffer, after " ==> "
   and before "//".  (The symbol ` ==> ' is the value of the customizable 
   variable `maxima-minor-output' and "//" is the value of 
   `maxima-minor-output-end'.  The new output is inserted, these strings 
   will be used to delete the old output.
   
   
   Outside of comments in maxima-mode, the opening and closing indicators 
   are the values of `maxima-mode-minor-output' and 
   `maxima-mode-minor-output-end', which by default are " /*==>" and 
   " <==*/", respectively.

 The commands `maxima-minibuffer-on-region', `maxima-minibuffer-on-line'
 and `maxima-minibuffer-on-form' work similarly to 
 `maxima-minibuffer-on-determined-region', but send the current region
 (respectively, the current line, current form) to Maxima and display
 the result in the minibuffer.
 (The form is the region between the preceding ; or $ and the subsequent
 ; or $)
 
 Care must be taken when inserting the output into the current buffer
 with `maxima-minibuffer-on-region' and `maxima-minibuffer-on-form'.
 With `maxima-minibuffer-on-region', as with 
 `maxima-minibuffer-on-determined-region' above, everything after any
 "==>" in the region will be ignored.  
 
 
 What will typically happen with `maxima-minibuffer-on-region' and
 `maxima-minibuffer-on-form', however, is that new outputs will
 be inserted without old output being deleted.

 The commands for the Maxima-minibuffer interaction can be made
 available by putting 

  #+BEGIN_SRC emacs-lisp 
 (autoload 'maxima-minibuffer "maxima" "Interact with Maxima from the minibuffer" t)
  (autoload 'maxima-minibuffer-on-determined-region "maxima" 
            "Send a information to Maxima, display the results in the minibuffer" t)
  (autoload 'maxima-minibuffer-on-region "maxima" 
            "Send a information to Maxima, display the results in the minibuffer" t)
  (autoload 'maxima-minibuffer-on-line "maxima" 
            "Send a information to Maxima, display the results in the minibuffer" t)
  (autoload 'maxima-minibuffer-on-form "maxima" 
            "Send a information to Maxima, display the results in the minibuffer" t)
  #+END_SRC
  
 in your .emacs


*** Maxima minor mode
 maxima-minor-mode provides convenient keybindings for the various
 interactions between Maxima and the minibuffer.
 
 It can be made easily available by placing this code in your .emacs,
 then =M-x maxima-minor-mode= will start the minor mode.

 #+begin_src emacs-lisp
  (autoload 'maxima-minor-mode "maxima" "Maxima minor mode" t)
 #+end_src
 
 (The autoloads for the individual function will not then be necessary.)
 
**** Enabled commands
     | Key combination | Function                                |
     |-----------------+-----------------------------------------|
     | C-c=e           | maxima-minibuffer-on-determined-region' |
     | C-c=l           | maxima-minibuffer-on-line'              |
     | C-c=r           | maxima-minibuffer-on-region'            |
     | C-c=f           | maxima-minibuffer-on-form'              |
     | C-c=m           | maxima-minibuffer'                      |
     | C-c=o           | maxima-insert-last-output'              |
     | C-c=t           | maxima-insert-last-output-tex'          |
